BROKER SCHEMA core.common.util2
PATH core.common.util;
DECLARE RTQ_REQUIRED EXTERNAL BOOLEAN FALSE;
DECLARE USE_CORRELID EXTERNAL BOOLEAN FALSE;

CREATE COMPUTE MODULE PushReplyToQV2_DoPush
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyMessageHeaders();
		CALL CopyAndPush();
		IF RTQ_REQUIRED AND IsRTQMissing(InputRoot.MQMD.ReplyToQ) THEN
			CALL ResponseResourceNotAvailable();
			RETURN FALSE;
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyAndPush() BEGIN
		SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
		DECLARE header REFERENCE TO OutputRoot.XMLNSC.nsIL:esbXML.Header;

		IF LASTMOVE(header) THEN
			DECLARE queue CHARACTER InputRoot.MQMD.ReplyToQ;
			DECLARE queueMgr CHARACTER InputRoot.MQMD.ReplyToQMgr;
			IF USE_CORRELID THEN
				DECLARE correlId BLOB InputRoot.MQMD.CorrelId;
				IF correlId IS NULL OR correlId = MQCI_NONE THEN
					SET correlId = InputRoot.MQMD.MsgId;
				END IF;
				CALL PushRTQWithCorrel(header, queue, queueMgr, correlId);
			ELSE
				CALL PushRTQ(header, queue, queueMgr);
			END IF;
		END IF;
		
		SET OutputRoot.MQMD.ReplyToQMgr = QueueManagerName;
		
	END;

	CREATE PROCEDURE ResponseResourceNotAvailable() BEGIN
		DECLARE incur REFERENCE TO InputRoot.XMLNSC;
		DECLARE env REFERENCE TO Environment;
		IF env.Variables.OriginMsg IS null THEN
			CALL SendOriginMsgToEnv(incur, env);
		END IF;

		DECLARE header REFERENCE TO OutputRoot.XMLNSC.nsIL:esbXML.Header;
		CALL setFault(header, 'Server.ESB.ResponseResourceNotAvailable', 
					  'Reply Endpoint Missing: MQMD.ReplyToQ is NULL or Empty');
		PROPAGATE TO TERMINAL 'out1';
	END;
END MODULE;