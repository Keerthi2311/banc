BROKER SCHEMA core.common.peq

DECLARE nsIL NAMESPACE 'http://grupobancolombia.com/intf/IL/esbXML/V3.0';
DECLARE nsIl NAMESPACE 'http://grupobancolombia.com/intf/IL/esbXML/V3.0';
DECLARE nsPEQ NAMESPACE 'http://grupobancolombia.com/intf/componente/tecnico/homologacion/RecuperarParametrizacionEquivalencias/V2.0';
DECLARE SEPARADOR_PATH CONSTANT CHARACTER ';';
DECLARE SEPARADOR_TIPO CONSTANT CHARACTER ':';
DECLARE SEPARADOR_CAMPO CONSTANT CHARACTER '/';
DECLARE UDP_APLICACION_DESTINO EXTERNAL CHARACTER '';
DECLARE UDP_SOCIEDAD_DESTINO EXTERNAL CHARACTER '';
DECLARE UDP_PATH_VALORES_HOMOLOGAR EXTERNAL CHARACTER '';

CREATE COMPUTE MODULE PEQ_Helper_prePEQ
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
	
		--- Hay que guardar el MQMD original para responder al final
		CREATE FIELD Environment.Variables;
		CREATE LASTCHILD OF Environment.Variables DOMAIN 'MQMD' FROM InputRoot.MQMD;
		
		-- Hay que guardar el mensaje de peticion original
		CREATE LASTCHILD OF Environment.Variables DOMAIN 'XMLNSC' FROM InputRoot.XMLNSC;
		DECLARE refHeaderIn REFERENCE TO InputRoot.XMLNSC.nsIL:esbXML.Header;
		DECLARE refBody, refP REFERENCE TO InputRoot.XMLNSC.nsIL:esbXML.Body;
	
		DECLARE serviceName CHARACTER refHeaderIn.requestData.destination.name;
		DECLARE socOrigenPEQ CHARACTER GetMessageContextProperty(refHeaderIn, 'WSRR:' || serviceName || ':SistemaOrigen');
		DECLARE appOrigenPEQ CHARACTER GetMessageContextProperty(refHeaderIn, 'WSRR:' || serviceName || ':DominioDatosOrigen');

		-- Crear el mensaje de peticiÃ³n
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE FIELD OutputRoot.XMLNSC.nsIl:esbXML.Header FROM InputRoot.XMLNSC.nsIl:esbXML.Header; 
		
		CREATE FIELD OutputRoot.XMLNSC.nsIl:esbXML.Body;
		DECLARE cursor REFERENCE TO OutputRoot.XMLNSC.nsIl:esbXML.Body;
		
		CREATE FIELD cursor.nsPEQ:recuperarParametrizacionEquivalencias.requerimientoParametrizacion AS cursor;
	
		CALL CreateEncabezadoHomologacion(cursor, appOrigenPEQ, UDP_APLICACION_DESTINO, socOrigenPEQ, UDP_SOCIEDAD_DESTINO);

		-- Los valores a homologar van separados por ;
		DECLARE paths CHARACTER UDP_PATH_VALORES_HOMOLOGAR;
		DECLARE i, j INTEGER POSITION(SEPARADOR_PATH IN paths);
		IF i > 0 THEN
			CAMPOS: LOOP
				--
				MOVE refP TO refBody;
				DECLARE p CHARACTER SUBSTRING(paths FROM 1 FOR i - 1);
				SET paths = SUBSTRING(paths FROM i + 1);
				SET i = POSITION(SEPARADOR_PATH IN paths);
				
				SET j = POSITION(SEPARADOR_TIPO IN p);
				IF j > 0 THEN
					DECLARE tipologia CHARACTER SUBSTRING(p FROM 1 FOR j - 1);
				
					DECLARE elementos ROW;
					CALL tokenizar(SUBSTRING(p FROM j + 1), SEPARADOR_CAMPO, elementos);
					FOR e AS elementos.val[] DO
						MOVE refP FIRSTCHILD NAMESPACE * NAME FIELDVALUE(e);
						IF NOT LASTMOVE(refP) THEN
							THROW USER EXCEPTION VALUES('Error navegando al campo especificado');
						END IF;
					END FOR;
				
					CALL AddCriterioParametrizacion(cursor, tipologia, FIELDVALUE(refP));
					
				ELSE
					THROW USER EXCEPTION VALUES('Los campos a homologar no se especificaron correctamente. TIPOLOGIA');
				END IF;
				
				IF i = 0 THEN
					LEAVE CAMPOS;
				END IF;
			END LOOP CAMPOS;
		ELSE
			THROW USER EXCEPTION VALUES('Los campos a homologar no se especificaron correctamente.');
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;